/**
 * @license
 * webvr-polyfill
 * Copyright (c) 2015-2017 Google
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * wglu-preserve-state.js
 * Copyright (c) 2016, Brandon Jones.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

!(function(e) {
	function t(i) {
		if (r[i]) return r[i].exports;
		var n = (r[i] = {
			i: i,
			l: !1,
			exports: {}
		});
		return e[i].call(n.exports, n, n.exports, t), (n.l = !0), n.exports;
	}
	var r = {};
	(t.m = e),
		(t.c = r),
		(t.i = function(e) {
			return e;
		}),
		(t.d = function(e, r, i) {
			t.o(e, r) ||
				Object.defineProperty(e, r, {
					configurable: !1,
					enumerable: !0,
					get: i
				});
		}),
		(t.n = function(e) {
			var r =
				e && e.__esModule
					? function() {
							return e.default;
						}
					: function() {
							return e;
						};
			return t.d(r, 'a', r), r;
		}),
		(t.o = function(e, t) {
			return Object.prototype.hasOwnProperty.call(e, t);
		}),
		(t.p = ''),
		t((t.s = 12));
})([
	function(e, t) {
		var r = window.Util || {};
		(r.MIN_TIMESTEP = 0.001),
			(r.MAX_TIMESTEP = 1),
			(r.base64 = function(e, t) {
				return 'data:' + e + ';base64,' + t;
			}),
			(r.lerp = function(e, t, r) {
				return e + (t - e) * r;
			}),
			(r.isIOS = (function() {
				var e = /iPad|iPhone|iPod/.test(navigator.platform);
				return function() {
					return e;
				};
			})()),
			(r.isAndroid = function() {
				return -1 !== navigator.userAgent.indexOf('Android');
			}),
			(r.isWebViewAndroid = (function() {
				var e =
					-1 !== navigator.userAgent.indexOf('Version') &&
					r.isAndroid() &&
					-1 !== navigator.userAgent.indexOf('Chrome');
				return function() {
					return e;
				};
			})()),
			(r.isSafari = (function() {
				var e = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
				return function() {
					return e;
				};
			})()),
			(r.isFirefoxAndroid = (function() {
				var e = -1 !== navigator.userAgent.indexOf('Firefox') && r.isAndroid();
				return function() {
					return e;
				};
			})()),
			(r.isLandscapeMode = function() {
				return 90 == window.orientation || -90 == window.orientation;
			}),
			(r.isTimestampDeltaValid = function(e) {
				return !isNaN(e) && (!(e <= r.MIN_TIMESTEP) && !(e > r.MAX_TIMESTEP));
			}),
			(r.getScreenWidth = function() {
				return Math.max(window.screen.width, window.screen.height) * window.devicePixelRatio;
			}),
			(r.getScreenHeight = function() {
				return Math.min(window.screen.width, window.screen.height) * window.devicePixelRatio;
			}),
			(r.IeDPI = function() {
				return Math.sqrt(screen.deviceXDPI * screen.deviceYDPI) / 96;
			}),
			(r.desktopDPI = function() {
				return window.devicePixelRatio ? 96 * +window.devicePixelRatio : r.IeDPI();
			}),
			(r.requestFullscreen = function(e) {
				if (r.isWebViewAndroid()) return !1;
				if (e.requestFullscreen) e.requestFullscreen();
				else if (e.webkitRequestFullscreen) e.webkitRequestFullscreen();
				else if (e.mozRequestFullScreen) e.mozRequestFullScreen();
				else {
					if (!e.msRequestFullscreen) return !1;
					e.msRequestFullscreen();
				}
				return !0;
			}),
			(r.exitFullscreen = function() {
				if (document.exitFullscreen) document.exitFullscreen();
				else if (document.webkitExitFullscreen) document.webkitExitFullscreen();
				else if (document.mozCancelFullScreen) document.mozCancelFullScreen();
				else {
					if (!document.msExitFullscreen) return !1;
					document.msExitFullscreen();
				}
				return !0;
			}),
			(r.getFullscreenElement = function() {
				return (
					document.fullscreenElement ||
					document.webkitFullscreenElement ||
					document.mozFullScreenElement ||
					document.msFullscreenElement
				);
			}),
			(r.linkProgram = function(e, t, r, i) {
				var n = e.createShader(e.VERTEX_SHADER);
				e.shaderSource(n, t), e.compileShader(n);
				var s = e.createShader(e.FRAGMENT_SHADER);
				e.shaderSource(s, r), e.compileShader(s);
				var a = e.createProgram();
				e.attachShader(a, n), e.attachShader(a, s);
				for (var o in i) e.bindAttribLocation(a, i[o], o);
				return e.linkProgram(a), e.deleteShader(n), e.deleteShader(s), a;
			}),
			(r.getProgramUniforms = function(e, t) {
				for (var r = {}, i = e.getProgramParameter(t, e.ACTIVE_UNIFORMS), n = '', s = 0; s < i; s++) {
					(n = e.getActiveUniform(t, s).name.replace('[0]', '')), (r[n] = e.getUniformLocation(t, n));
				}
				return r;
			}),
			(r.orthoMatrix = function(e, t, r, i, n, s, a) {
				var o = 1 / (t - r),
					l = 1 / (i - n),
					d = 1 / (s - a);
				return (
					(e[0] = -2 * o),
					(e[1] = 0),
					(e[2] = 0),
					(e[3] = 0),
					(e[4] = 0),
					(e[5] = -2 * l),
					(e[6] = 0),
					(e[7] = 0),
					(e[8] = 0),
					(e[9] = 0),
					(e[10] = 2 * d),
					(e[11] = 0),
					(e[12] = (t + r) * o),
					(e[13] = (n + i) * l),
					(e[14] = (a + s) * d),
					(e[15] = 1),
					e
				);
			}),
			(r.safariCssSizeWorkaround = function(e) {
				if (r.isIOS()) {
					var t = e.style.width,
						i = e.style.height;
					(e.style.width = parseInt(t) + 1 + 'px'),
						(e.style.height = parseInt(i) + 'px'),
						setTimeout(function() {
							(e.style.width = t), (e.style.height = i);
						}, 100);
				}
				(window.Util = r), (window.canvas = e);
			}),
			(r.frameDataFromPose = (function() {
				function e(e, t, r, i) {
					var n = Math.tan(t ? t.upDegrees * s : a),
						o = Math.tan(t ? t.downDegrees * s : a),
						l = Math.tan(t ? t.leftDegrees * s : a),
						d = Math.tan(t ? t.rightDegrees * s : a),
						c = 2 / (l + d),
						u = 2 / (n + o);
					return (
						(e[0] = c),
						(e[1] = 0),
						(e[2] = 0),
						(e[3] = 0),
						(e[4] = 0),
						(e[5] = u),
						(e[6] = 0),
						(e[7] = 0),
						(e[8] = -(l - d) * c * 0.5),
						(e[9] = (n - o) * u * 0.5),
						(e[10] = i / (r - i)),
						(e[11] = -1),
						(e[12] = 0),
						(e[13] = 0),
						(e[14] = i * r / (r - i)),
						(e[15] = 0),
						e
					);
				}
				function t(e, t, r) {
					var i = t[0],
						n = t[1],
						s = t[2],
						a = t[3],
						o = i + i,
						l = n + n,
						d = s + s,
						c = i * o,
						u = i * l,
						h = i * d,
						A = n * l,
						f = n * d,
						p = s * d,
						m = a * o,
						E = a * l,
						v = a * d;
					return (
						(e[0] = 1 - (A + p)),
						(e[1] = u + v),
						(e[2] = h - E),
						(e[3] = 0),
						(e[4] = u - v),
						(e[5] = 1 - (c + p)),
						(e[6] = f + m),
						(e[7] = 0),
						(e[8] = h + E),
						(e[9] = f - m),
						(e[10] = 1 - (c + A)),
						(e[11] = 0),
						(e[12] = r[0]),
						(e[13] = r[1]),
						(e[14] = r[2]),
						(e[15] = 1),
						e
					);
				}
				function r(e, t, r) {
					var i,
						n,
						s,
						a,
						o,
						l,
						d,
						c,
						u,
						h,
						A,
						f,
						p = r[0],
						m = r[1],
						E = r[2];
					return (
						t === e
							? ((e[12] = t[0] * p + t[4] * m + t[8] * E + t[12]),
								(e[13] = t[1] * p + t[5] * m + t[9] * E + t[13]),
								(e[14] = t[2] * p + t[6] * m + t[10] * E + t[14]),
								(e[15] = t[3] * p + t[7] * m + t[11] * E + t[15]))
							: ((i = t[0]),
								(n = t[1]),
								(s = t[2]),
								(a = t[3]),
								(o = t[4]),
								(l = t[5]),
								(d = t[6]),
								(c = t[7]),
								(u = t[8]),
								(h = t[9]),
								(A = t[10]),
								(f = t[11]),
								(e[0] = i),
								(e[1] = n),
								(e[2] = s),
								(e[3] = a),
								(e[4] = o),
								(e[5] = l),
								(e[6] = d),
								(e[7] = c),
								(e[8] = u),
								(e[9] = h),
								(e[10] = A),
								(e[11] = f),
								(e[12] = i * p + o * m + u * E + t[12]),
								(e[13] = n * p + l * m + h * E + t[13]),
								(e[14] = s * p + d * m + A * E + t[14]),
								(e[15] = a * p + c * m + f * E + t[15])),
						e
					);
				}
				function i(e, t) {
					var r = t[0],
						i = t[1],
						n = t[2],
						s = t[3],
						a = t[4],
						o = t[5],
						l = t[6],
						d = t[7],
						c = t[8],
						u = t[9],
						h = t[10],
						A = t[11],
						f = t[12],
						p = t[13],
						m = t[14],
						E = t[15],
						v = r * o - i * a,
						g = r * l - n * a,
						b = r * d - s * a,
						w = i * l - n * o,
						y = i * d - s * o,
						_ = n * d - s * l,
						T = c * p - u * f,
						R = c * m - h * f,
						S = c * E - A * f,
						M = u * m - h * p,
						F = u * E - A * p,
						D = h * E - A * m,
						C = v * D - g * F + b * M + w * S - y * R + _ * T;
					return C
						? ((C = 1 / C),
							(e[0] = (o * D - l * F + d * M) * C),
							(e[1] = (n * F - i * D - s * M) * C),
							(e[2] = (p * _ - m * y + E * w) * C),
							(e[3] = (h * y - u * _ - A * w) * C),
							(e[4] = (l * S - a * D - d * R) * C),
							(e[5] = (r * D - n * S + s * R) * C),
							(e[6] = (m * b - f * _ - E * g) * C),
							(e[7] = (c * _ - h * b + A * g) * C),
							(e[8] = (a * F - o * S + d * T) * C),
							(e[9] = (i * S - r * F - s * T) * C),
							(e[10] = (f * y - p * b + E * v) * C),
							(e[11] = (u * b - c * y - A * v) * C),
							(e[12] = (o * R - a * M - l * T) * C),
							(e[13] = (r * M - i * R + n * T) * C),
							(e[14] = (p * g - f * w - m * v) * C),
							(e[15] = (c * w - u * g + h * v) * C),
							e)
						: null;
				}
				function n(n, s, a, d, c) {
					e(n, d ? d.fieldOfView : null, c.depthNear, c.depthFar),
						t(s, a.orientation || o, a.position || l),
						d && r(s, s, d.offset),
						i(s, s);
				}
				var s = Math.PI / 180,
					a = 0.25 * Math.PI,
					o = new Float32Array([0, 0, 0, 1]),
					l = new Float32Array([0, 0, 0]);
				return function(e, t, r) {
					return (
						!(!e || !t) &&
						((e.pose = t),
						(e.timestamp = t.timestamp),
						n(e.leftProjectionMatrix, e.leftViewMatrix, t, r.getEyeParameters('left'), r),
						n(e.rightProjectionMatrix, e.rightViewMatrix, t, r.getEyeParameters('right'), r),
						!0)
					);
				};
			})()),
			(r.isInsideCrossDomainIFrame = function() {
				var e = window.self !== window.top,
					t = r.getDomainFromUrl(document.referrer),
					i = r.getDomainFromUrl(window.location.href);
				return e && t !== i;
			}),
			(r.getDomainFromUrl = function(e) {
				var t;
				return (t = e.indexOf('://') > -1 ? e.split('/')[2] : e.split('/')[0]), (t = t.split(':')[0]);
			}),
			(e.exports = r);
	},
	function(e, t, r) {
		function i() {
			(this.leftProjectionMatrix = new Float32Array(16)),
				(this.leftViewMatrix = new Float32Array(16)),
				(this.rightProjectionMatrix = new Float32Array(16)),
				(this.rightViewMatrix = new Float32Array(16)),
				(this.pose = null);
		}
		function n() {
			(this.isPolyfilled = !0),
				(this.displayId = o++),
				(this.displayName = 'webvr-polyfill displayName'),
				(this.depthNear = 0.01),
				(this.depthFar = 1e4),
				(this.isConnected = !0),
				(this.isPresenting = !1),
				(this.capabilities = {
					hasPosition: !1,
					hasOrientation: !1,
					hasExternalDisplay: !1,
					canPresent: !1,
					maxLayers: 1
				}),
				(this.stageParameters = null),
				(this.waitingForPresent_ = !1),
				(this.layer_ = null),
				(this.fullscreenElement_ = null),
				(this.fullscreenWrapper_ = null),
				(this.fullscreenElementCachedStyle_ = null),
				(this.fullscreenEventTarget_ = null),
				(this.fullscreenChangeHandler_ = null),
				(this.fullscreenErrorHandler_ = null),
				(this.wakelock_ = new a());
		}
		var s = r(0),
			a = r(18),
			o = 1e3,
			l = [0, 0, 0.5, 1],
			d = [0.5, 0, 0.5, 1];
		(n.prototype.getFrameData = function(e) {
			return s.frameDataFromPose(e, this.getPose(), this);
		}),
			(n.prototype.getPose = function() {
				return this.getImmediatePose();
			}),
			(n.prototype.requestAnimationFrame = function(e) {
				return window.requestAnimationFrame(e);
			}),
			(n.prototype.cancelAnimationFrame = function(e) {
				return window.cancelAnimationFrame(e);
			}),
			(n.prototype.wrapForFullscreen = function(e) {
				if (s.isIOS()) return e;
				if (!this.fullscreenWrapper_) {
					this.fullscreenWrapper_ = document.createElement('div');
					var t = [
						'height: ' + Math.min(screen.height, screen.width) + 'px !important',
						'top: 0 !important',
						'left: 0 !important',
						'right: 0 !important',
						'border: 0',
						'margin: 0',
						'padding: 0',
						'z-index: 999999 !important',
						'position: fixed'
					];
					this.fullscreenWrapper_.setAttribute('style', t.join('; ') + ';'),
						this.fullscreenWrapper_.classList.add('webvr-polyfill-fullscreen-wrapper');
				}
				if (this.fullscreenElement_ == e) return this.fullscreenWrapper_;
				this.removeFullscreenWrapper(), (this.fullscreenElement_ = e);
				var r = this.fullscreenElement_.parentElement;
				r.insertBefore(this.fullscreenWrapper_, this.fullscreenElement_),
					r.removeChild(this.fullscreenElement_),
					this.fullscreenWrapper_.insertBefore(this.fullscreenElement_, this.fullscreenWrapper_.firstChild),
					(this.fullscreenElementCachedStyle_ = this.fullscreenElement_.getAttribute('style'));
				var i = this;
				return (
					(function() {
						if (i.fullscreenElement_) {
							var e = [
								'position: absolute',
								'top: 0',
								'left: 0',
								'width: ' + Math.max(screen.width, screen.height) + 'px',
								'height: ' + Math.min(screen.height, screen.width) + 'px',
								'border: 0',
								'margin: 0',
								'padding: 0'
							];
							i.fullscreenElement_.setAttribute('style', e.join('; ') + ';');
						}
					})(),
					this.fullscreenWrapper_
				);
			}),
			(n.prototype.removeFullscreenWrapper = function() {
				if (this.fullscreenElement_) {
					var e = this.fullscreenElement_;
					this.fullscreenElementCachedStyle_
						? e.setAttribute('style', this.fullscreenElementCachedStyle_)
						: e.removeAttribute('style'),
						(this.fullscreenElement_ = null),
						(this.fullscreenElementCachedStyle_ = null);
					var t = this.fullscreenWrapper_.parentElement;
					return (
						this.fullscreenWrapper_.removeChild(e),
						t.insertBefore(e, this.fullscreenWrapper_),
						t.removeChild(this.fullscreenWrapper_),
						e
					);
				}
			}),
			(n.prototype.requestPresent = function(e) {
				var t = this.isPresenting,
					r = this;
				return new Promise(function(i, n) {
					if (!r.capabilities.canPresent) return void n(new Error('VRDisplay is not capable of presenting.'));
					var a = e[0];
					if (!a.source) return void i();
					var o = a.leftBounds || l,
						c = a.rightBounds || d;
					if (t) {
						var u = r.layer_;
						u.source !== a.source && (u.source = a.source);
						for (var h = 0; h < 4; h++) (u.leftBounds[h] = o[h]), (u.rightBounds[h] = c[h]);
						return void i();
					}
					if (
						((r.layer_ = {
							predistorted: a.predistorted,
							source: a.source,
							leftBounds: o.slice(0),
							rightBounds: c.slice(0)
						}),
						(r.waitingForPresent_ = !1),
						r.layer_ && r.layer_.source)
					) {
						var A = r.wrapForFullscreen(r.layer_.source),
							f = function() {
								var e = s.getFullscreenElement();
								(r.isPresenting = A === e),
									r.isPresenting
										? (screen.orientation &&
												screen.orientation.lock &&
												screen.orientation.lock('landscape-primary').catch(function(e) {}),
											(r.waitingForPresent_ = !1),
											r.beginPresent_(),
											i())
										: (screen.orientation &&
												screen.orientation.unlock &&
												screen.orientation.unlock(),
											r.removeFullscreenWrapper(),
											r.wakelock_.release(),
											r.endPresent_(),
											r.removeFullscreenListeners_()),
									r.fireVRDisplayPresentChange_();
							},
							p = function() {
								r.waitingForPresent_ &&
									(r.removeFullscreenWrapper(),
									r.removeFullscreenListeners_(),
									r.wakelock_.release(),
									(r.waitingForPresent_ = !1),
									(r.isPresenting = !1),
									n(new Error('Unable to present.')));
							};
						r.addFullscreenListeners_(A, f, p),
							s.requestFullscreen(A)
								? (r.wakelock_.request(), (r.waitingForPresent_ = !0))
								: (s.isIOS() || s.isWebViewAndroid()) &&
									(r.wakelock_.request(),
									(r.isPresenting = !0),
									r.beginPresent_(),
									r.fireVRDisplayPresentChange_(),
									i());
					}
					r.waitingForPresent_ || s.isIOS() || (s.exitFullscreen(), n(new Error('Unable to present.')));
				});
			}),
			(n.prototype.exitPresent = function() {
				var e = this.isPresenting,
					t = this;
				return (
					(this.isPresenting = !1),
					(this.layer_ = null),
					this.wakelock_.release(),
					new Promise(function(r, i) {
						e
							? (!s.exitFullscreen() && s.isIOS() && (t.endPresent_(), t.fireVRDisplayPresentChange_()),
								s.isWebViewAndroid() &&
									(t.removeFullscreenWrapper(),
									t.removeFullscreenListeners_(),
									t.endPresent_(),
									t.fireVRDisplayPresentChange_()),
								r())
							: i(new Error('Was not presenting to VRDisplay.'));
					})
				);
			}),
			(n.prototype.getLayers = function() {
				return this.layer_ ? [this.layer_] : [];
			}),
			(n.prototype.fireVRDisplayPresentChange_ = function() {
				var e = new CustomEvent('vrdisplaypresentchange', {
					detail: {
						display: this
					}
				});
				window.dispatchEvent(e);
			}),
			(n.prototype.fireVRDisplayConnect_ = function() {
				var e = new CustomEvent('vrdisplayconnect', {
					detail: {
						display: this
					}
				});
				window.dispatchEvent(e);
			}),
			(n.prototype.addFullscreenListeners_ = function(e, t, r) {
				this.removeFullscreenListeners_(),
					(this.fullscreenEventTarget_ = e),
					(this.fullscreenChangeHandler_ = t),
					(this.fullscreenErrorHandler_ = r),
					t &&
						(document.fullscreenEnabled
							? e.addEventListener('fullscreenchange', t, !1)
							: document.webkitFullscreenEnabled
								? e.addEventListener('webkitfullscreenchange', t, !1)
								: document.mozFullScreenEnabled
									? document.addEventListener('mozfullscreenchange', t, !1)
									: document.msFullscreenEnabled && e.addEventListener('msfullscreenchange', t, !1)),
					r &&
						(document.fullscreenEnabled
							? e.addEventListener('fullscreenerror', r, !1)
							: document.webkitFullscreenEnabled
								? e.addEventListener('webkitfullscreenerror', r, !1)
								: document.mozFullScreenEnabled
									? document.addEventListener('mozfullscreenerror', r, !1)
									: document.msFullscreenEnabled && e.addEventListener('msfullscreenerror', r, !1));
			}),
			(n.prototype.removeFullscreenListeners_ = function() {
				if (this.fullscreenEventTarget_) {
					var e = this.fullscreenEventTarget_;
					if (this.fullscreenChangeHandler_) {
						var t = this.fullscreenChangeHandler_;
						e.removeEventListener('fullscreenchange', t, !1),
							e.removeEventListener('webkitfullscreenchange', t, !1),
							document.removeEventListener('mozfullscreenchange', t, !1),
							e.removeEventListener('msfullscreenchange', t, !1);
					}
					if (this.fullscreenErrorHandler_) {
						var r = this.fullscreenErrorHandler_;
						e.removeEventListener('fullscreenerror', r, !1),
							e.removeEventListener('webkitfullscreenerror', r, !1),
							document.removeEventListener('mozfullscreenerror', r, !1),
							e.removeEventListener('msfullscreenerror', r, !1);
					}
					(this.fullscreenEventTarget_ = null),
						(this.fullscreenChangeHandler_ = null),
						(this.fullscreenErrorHandler_ = null);
				}
			}),
			(n.prototype.beginPresent_ = function() {}),
			(n.prototype.endPresent_ = function() {}),
			(n.prototype.submitFrame = function(e) {}),
			(n.prototype.getEyeParameters = function(e) {
				return null;
			}),
			(e.exports.VRFrameData = i),
			(e.exports.VRDisplay = n);
	},
	function(e, t, r) {
		function i(e) {
			(this.gl = e),
				(this.attribs = {
					position: 0
				}),
				(this.program = n.linkProgram(e, a, o, this.attribs)),
				(this.uniforms = n.getProgramUniforms(e, this.program)),
				(this.vertexBuffer = e.createBuffer()),
				(this.gearOffset = 0),
				(this.gearVertexCount = 0),
				(this.arrowOffset = 0),
				(this.arrowVertexCount = 0),
				(this.projMat = new Float32Array(16)),
				(this.listener = null),
				this.onResize();
		}
		var n = r(0),
			s = r(3),
			a = [
				'attribute vec2 position;',
				'uniform mat4 projectionMat;',
				'void main() {',
				'  gl_Position = projectionMat * vec4( position, -1.0, 1.0 );',
				'}'
			].join('\n'),
			o = [
				'precision mediump float;',
				'uniform vec4 color;',
				'void main() {',
				'  gl_FragColor = color;',
				'}'
			].join('\n'),
			l = Math.PI / 180,
			d = 0.3125;
		(i.prototype.destroy = function() {
			var e = this.gl;
			this.listener && e.canvas.removeEventListener('click', this.listener, !1),
				e.deleteProgram(this.program),
				e.deleteBuffer(this.vertexBuffer);
		}),
			(i.prototype.listen = function(e, t) {
				var r = this.gl.canvas;
				(this.listener = function(i) {
					var n = r.clientWidth / 2;
					i.clientX > n - 42 && i.clientX < n + 42 && i.clientY > r.clientHeight - 42
						? e(i)
						: i.clientX < 42 && i.clientY < 42 && t(i);
				}),
					r.addEventListener('click', this.listener, !1);
			}),
			(i.prototype.onResize = function() {
				var e = this.gl,
					t = this,
					r = [e.ARRAY_BUFFER_BINDING];
				s(e, r, function(e) {
					function r(e, t) {
						var r = (90 - e) * l,
							i = Math.cos(r),
							a = Math.sin(r);
						n.push(d * i * A + s, d * a * A + A), n.push(t * i * A + s, t * a * A + A);
					}
					function i(t, r) {
						n.push(f + t, e.drawingBufferHeight - f - r);
					}
					var n = [],
						s = e.drawingBufferWidth / 2,
						a = Math.max(screen.width, screen.height) * window.devicePixelRatio,
						o = e.drawingBufferWidth / a,
						c = o * window.devicePixelRatio,
						u = 4 * c / 2,
						h = 42 * c,
						A = 28 * c / 2,
						f = 14 * c;
					n.push(s - u, h),
						n.push(s - u, e.drawingBufferHeight),
						n.push(s + u, h),
						n.push(s + u, e.drawingBufferHeight),
						(t.gearOffset = n.length / 2);
					for (var p = 0; p <= 6; p++) {
						var m = 60 * p;
						r(m, 1), r(m + 12, 1), r(m + 20, 0.75), r(m + 40, 0.75), r(m + 48, 1);
					}
					(t.gearVertexCount = n.length / 2 - t.gearOffset), (t.arrowOffset = n.length / 2);
					var E = u / Math.sin(45 * l);
					i(0, A),
						i(A, 0),
						i(A + E, E),
						i(E, A + E),
						i(E, A - E),
						i(0, A),
						i(A, 2 * A),
						i(A + E, 2 * A - E),
						i(E, A - E),
						i(0, A),
						i(E, A - u),
						i(28 * c, A - u),
						i(E, A + u),
						i(28 * c, A + u),
						(t.arrowVertexCount = n.length / 2 - t.arrowOffset),
						e.bindBuffer(e.ARRAY_BUFFER, t.vertexBuffer),
						e.bufferData(e.ARRAY_BUFFER, new Float32Array(n), e.STATIC_DRAW);
				});
			}),
			(i.prototype.render = function() {
				var e = this.gl,
					t = this,
					r = [
						e.CULL_FACE,
						e.DEPTH_TEST,
						e.BLEND,
						e.SCISSOR_TEST,
						e.STENCIL_TEST,
						e.COLOR_WRITEMASK,
						e.VIEWPORT,
						e.CURRENT_PROGRAM,
						e.ARRAY_BUFFER_BINDING
					];
				s(e, r, function(e) {
					e.disable(e.CULL_FACE),
						e.disable(e.DEPTH_TEST),
						e.disable(e.BLEND),
						e.disable(e.SCISSOR_TEST),
						e.disable(e.STENCIL_TEST),
						e.colorMask(!0, !0, !0, !0),
						e.viewport(0, 0, e.drawingBufferWidth, e.drawingBufferHeight),
						t.renderNoState();
				});
			}),
			(i.prototype.renderNoState = function() {
				var e = this.gl;
				e.useProgram(this.program),
					e.bindBuffer(e.ARRAY_BUFFER, this.vertexBuffer),
					e.enableVertexAttribArray(this.attribs.position),
					e.vertexAttribPointer(this.attribs.position, 2, e.FLOAT, !1, 8, 0),
					e.uniform4f(this.uniforms.color, 1, 1, 1, 1),
					n.orthoMatrix(this.projMat, 0, e.drawingBufferWidth, 0, e.drawingBufferHeight, 0.1, 1024),
					e.uniformMatrix4fv(this.uniforms.projectionMat, !1, this.projMat),
					e.drawArrays(e.TRIANGLE_STRIP, 0, 4),
					e.drawArrays(e.TRIANGLE_STRIP, this.gearOffset, this.gearVertexCount),
					e.drawArrays(e.TRIANGLE_STRIP, this.arrowOffset, this.arrowVertexCount);
			}),
			(e.exports = i);
	},
	function(e, t) {
		function r(e, t, r) {
			if (!t) return void r(e);
			for (var i = [], n = null, s = 0; s < t.length; ++s) {
				var a = t[s];
				switch (a) {
					case e.TEXTURE_BINDING_2D:
					case e.TEXTURE_BINDING_CUBE_MAP:
						var o = t[++s];
						if (o < e.TEXTURE0 || o > e.TEXTURE31) {
							i.push(null, null);
							break;
						}
						n || (n = e.getParameter(e.ACTIVE_TEXTURE)),
							e.activeTexture(o),
							i.push(e.getParameter(a), null);
						break;
					case e.ACTIVE_TEXTURE:
						(n = e.getParameter(e.ACTIVE_TEXTURE)), i.push(null);
						break;
					default:
						i.push(e.getParameter(a));
				}
			}
			r(e);
			for (var s = 0; s < t.length; ++s) {
				var a = t[s],
					l = i[s];
				switch (a) {
					case e.ACTIVE_TEXTURE:
						break;
					case e.ARRAY_BUFFER_BINDING:
						e.bindBuffer(e.ARRAY_BUFFER, l);
						break;
					case e.COLOR_CLEAR_VALUE:
						e.clearColor(l[0], l[1], l[2], l[3]);
						break;
					case e.COLOR_WRITEMASK:
						e.colorMask(l[0], l[1], l[2], l[3]);
						break;
					case e.CURRENT_PROGRAM:
						e.useProgram(l);
						break;
					case e.ELEMENT_ARRAY_BUFFER_BINDING:
						e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, l);
						break;
					case e.FRAMEBUFFER_BINDING:
						e.bindFramebuffer(e.FRAMEBUFFER, l);
						break;
					case e.RENDERBUFFER_BINDING:
						e.bindRenderbuffer(e.RENDERBUFFER, l);
						break;
					case e.TEXTURE_BINDING_2D:
						var o = t[++s];
						if (o < e.TEXTURE0 || o > e.TEXTURE31) break;
						e.activeTexture(o), e.bindTexture(e.TEXTURE_2D, l);
						break;
					case e.TEXTURE_BINDING_CUBE_MAP:
						var o = t[++s];
						if (o < e.TEXTURE0 || o > e.TEXTURE31) break;
						e.activeTexture(o), e.bindTexture(e.TEXTURE_CUBE_MAP, l);
						break;
					case e.VIEWPORT:
						e.viewport(l[0], l[1], l[2], l[3]);
						break;
					case e.BLEND:
					case e.CULL_FACE:
					case e.DEPTH_TEST:
					case e.SCISSOR_TEST:
					case e.STENCIL_TEST:
						l ? e.enable(a) : e.disable(a);
				}
				n && e.activeTexture(n);
			}
		}
		e.exports = r;
	},
	function(e, t, r) {
		function i(e) {
			(this.width = e.width || o.getScreenWidth()),
				(this.height = e.height || o.getScreenHeight()),
				(this.widthMeters = e.widthMeters),
				(this.heightMeters = e.heightMeters),
				(this.bevelMeters = e.bevelMeters);
		}
		function n(e) {
			(this.viewer = c.CardboardV2),
				this.updateDeviceParams(e),
				(this.distortion = new a(this.viewer.distortionCoefficients));
		}
		function s(e) {
			(this.id = e.id),
				(this.label = e.label),
				(this.fov = e.fov),
				(this.interLensDistance = e.interLensDistance),
				(this.baselineLensDistance = e.baselineLensDistance),
				(this.screenLensDistance = e.screenLensDistance),
				(this.distortionCoefficients = e.distortionCoefficients),
				(this.inverseCoefficients = e.inverseCoefficients);
		}
		var a = r(9),
			o = r(0),
			l = new i({
				widthMeters: 0.11,
				heightMeters: 0.062,
				bevelMeters: 0.004
			}),
			d = new i({
				widthMeters: 0.1038,
				heightMeters: 0.0584,
				bevelMeters: 0.004
			}),
			c = {
				CardboardV1: new s({
					id: 'CardboardV1',
					label: 'Cardboard I/O 2014',
					fov: 40,
					interLensDistance: 0.06,
					baselineLensDistance: 0.035,
					screenLensDistance: 0.042,
					distortionCoefficients: [0.441, 0.156],
					inverseCoefficients: [
						-0.4410035,
						0.42756155,
						-0.4804439,
						0.5460139,
						-0.58821183,
						0.5733938,
						-0.48303202,
						0.33299083,
						-0.17573841,
						0.0651772,
						-0.01488963,
						0.001559834
					]
				}),
				CardboardV2: new s({
					id: 'CardboardV2',
					label: 'Cardboard I/O 2015',
					fov: 60,
					interLensDistance: 0.064,
					baselineLensDistance: 0.035,
					screenLensDistance: 0.039,
					distortionCoefficients: [0.34, 0.55],
					inverseCoefficients: [
						-0.33836704,
						-0.18162185,
						0.862655,
						-1.2462051,
						1.0560602,
						-0.58208317,
						0.21609078,
						-0.05444823,
						0.009177956,
						-0.0009904169,
						6183535e-11,
						-16981803e-13
					]
				})
			};
		(n.prototype.updateDeviceParams = function(e) {
			this.device = this.determineDevice_(e) || this.device;
		}),
			(n.prototype.getDevice = function() {
				return this.device;
			}),
			(n.prototype.setViewer = function(e) {
				(this.viewer = e), (this.distortion = new a(this.viewer.distortionCoefficients));
			}),
			(n.prototype.determineDevice_ = function(e) {
				if (!e) return o.isIOS() ? d : l;
				var t = 0.0254 / e.xdpi,
					r = 0.0254 / e.ydpi;
				return new i({
					widthMeters: t * o.getScreenWidth(),
					heightMeters: r * o.getScreenHeight(),
					bevelMeters: 0.001 * e.bevelMm
				});
			}),
			(n.prototype.getDistortedFieldOfViewLeftEye = function() {
				var e = this.viewer,
					t = this.device,
					r = this.distortion,
					i = e.screenLensDistance,
					n = (t.widthMeters - e.interLensDistance) / 2,
					s = e.interLensDistance / 2,
					a = e.baselineLensDistance - t.bevelMeters,
					o = t.heightMeters - a,
					l = THREE.Math.RAD2DEG * Math.atan(r.distort(n / i)),
					d = THREE.Math.RAD2DEG * Math.atan(r.distort(s / i)),
					c = THREE.Math.RAD2DEG * Math.atan(r.distort(a / i)),
					u = THREE.Math.RAD2DEG * Math.atan(r.distort(o / i));
				return {
					leftDegrees: Math.min(l, e.fov),
					rightDegrees: Math.min(d, e.fov),
					downDegrees: Math.min(c, e.fov),
					upDegrees: Math.min(u, e.fov)
				};
			}),
			(n.prototype.getLeftEyeVisibleTanAngles = function() {
				var e = this.viewer,
					t = this.device,
					r = this.distortion,
					i = Math.tan(-THREE.Math.DEG2RAD * e.fov),
					n = Math.tan(THREE.Math.DEG2RAD * e.fov),
					s = Math.tan(THREE.Math.DEG2RAD * e.fov),
					a = Math.tan(-THREE.Math.DEG2RAD * e.fov),
					o = t.widthMeters / 4,
					l = t.heightMeters / 2,
					d = e.baselineLensDistance - t.bevelMeters - l,
					c = e.interLensDistance / 2 - o,
					u = -d,
					h = e.screenLensDistance,
					A = r.distort((c - o) / h),
					f = r.distort((u + l) / h),
					p = r.distort((c + o) / h),
					m = r.distort((u - l) / h),
					E = new Float32Array(4);
				return (
					(E[0] = Math.max(i, A)),
					(E[1] = Math.min(n, f)),
					(E[2] = Math.min(s, p)),
					(E[3] = Math.max(a, m)),
					E
				);
			}),
			(n.prototype.getLeftEyeNoLensTanAngles = function() {
				var e = this.viewer,
					t = this.device,
					r = this.distortion,
					i = new Float32Array(4),
					n = r.distortInverse(Math.tan(-THREE.Math.DEG2RAD * e.fov)),
					s = r.distortInverse(Math.tan(THREE.Math.DEG2RAD * e.fov)),
					a = r.distortInverse(Math.tan(THREE.Math.DEG2RAD * e.fov)),
					o = r.distortInverse(Math.tan(-THREE.Math.DEG2RAD * e.fov)),
					l = t.widthMeters / 4,
					d = t.heightMeters / 2,
					c = e.baselineLensDistance - t.bevelMeters - d,
					u = e.interLensDistance / 2 - l,
					h = -c,
					A = e.screenLensDistance,
					f = (u - l) / A,
					p = (h + d) / A,
					m = (u + l) / A,
					E = (h - d) / A;
				return (
					(i[0] = Math.max(n, f)),
					(i[1] = Math.min(s, p)),
					(i[2] = Math.min(a, m)),
					(i[3] = Math.max(o, E)),
					i
				);
			}),
			(n.prototype.getLeftEyeVisibleScreenRect = function(e) {
				var t = this.viewer,
					r = this.device,
					i = t.screenLensDistance,
					n = (r.widthMeters - t.interLensDistance) / 2,
					s = t.baselineLensDistance - r.bevelMeters,
					a = (e[0] * i + n) / r.widthMeters,
					o = (e[1] * i + s) / r.heightMeters,
					l = (e[2] * i + n) / r.widthMeters,
					d = (e[3] * i + s) / r.heightMeters;
				return {
					x: a,
					y: d,
					width: l - a,
					height: o - d
				};
			}),
			(n.prototype.getFieldOfViewLeftEye = function(e) {
				return e ? this.getUndistortedFieldOfViewLeftEye() : this.getDistortedFieldOfViewLeftEye();
			}),
			(n.prototype.getFieldOfViewRightEye = function(e) {
				var t = this.getFieldOfViewLeftEye(e);
				return {
					leftDegrees: t.rightDegrees,
					rightDegrees: t.leftDegrees,
					upDegrees: t.upDegrees,
					downDegrees: t.downDegrees
				};
			}),
			(n.prototype.getUndistortedFieldOfViewLeftEye = function() {
				var e = this.getUndistortedParams_();
				return {
					leftDegrees: THREE.Math.RAD2DEG * Math.atan(e.outerDist),
					rightDegrees: THREE.Math.RAD2DEG * Math.atan(e.innerDist),
					downDegrees: THREE.Math.RAD2DEG * Math.atan(e.bottomDist),
					upDegrees: THREE.Math.RAD2DEG * Math.atan(e.topDist)
				};
			}),
			(n.prototype.getUndistortedViewportLeftEye = function() {
				var e = this.getUndistortedParams_(),
					t = this.viewer,
					r = this.device,
					i = t.screenLensDistance,
					n = r.widthMeters / i,
					s = r.heightMeters / i,
					a = r.width / n,
					o = r.height / s,
					l = Math.round((e.eyePosX - e.outerDist) * a),
					d = Math.round((e.eyePosY - e.bottomDist) * o);
				return {
					x: l,
					y: d,
					width: Math.round((e.eyePosX + e.innerDist) * a) - l,
					height: Math.round((e.eyePosY + e.topDist) * o) - d
				};
			}),
			(n.prototype.getUndistortedParams_ = function() {
				var e = this.viewer,
					t = this.device,
					r = this.distortion,
					i = e.screenLensDistance,
					n = e.interLensDistance / 2 / i,
					s = t.widthMeters / i,
					a = t.heightMeters / i,
					o = s / 2 - n,
					l = (e.baselineLensDistance - t.bevelMeters) / i,
					d = e.fov,
					c = r.distortInverse(Math.tan(THREE.Math.DEG2RAD * d)),
					u = Math.min(o, c),
					h = Math.min(n, c),
					A = Math.min(l, c);
				return {
					outerDist: u,
					innerDist: h,
					topDist: Math.min(a - l, c),
					bottomDist: A,
					eyePosX: o,
					eyePosY: l
				};
			}),
			(n.Viewers = c),
			(e.exports = n);
	},
	function(e, t, r) {
		function i() {
			this.enablePolyfill();
		}
		var n = (r(0), r(8)),
			s = r(1).VRDisplay,
			a = r(1).VRFrameData,
			o = r(6).version;
		(i.prototype.enablePolyfill = function() {
			if (
				((navigator.getVRDisplays = this.getVRDisplays.bind(this)),
				(window.VRDisplay = s),
				navigator && !navigator.vrEnabled)
			) {
				Object.defineProperty(navigator, 'vrEnabled', {
					get: function() {
						return !0;
					}
				});
			}
			'VRFrameData' in window || (window.VRFrameData = a);
		}),
			(i.prototype.getVRDisplays = function() {
				return Promise.resolve([new n()]);
			}),
			(i.version = o),
			(e.exports.WebVRPolyfill = i);
	},
	function(e, t) {
		e.exports = {
			name: 'webvr-polyfill',
			version: '0.9.36',
			homepage: 'https://github.com/googlevr/webvr-polyfill',
			authors: [
				'Boris Smus <boris@smus.com>',
				'Brandon Jones <tojiro@gmail.com>',
				'Jordan Santell <jordan@jsantell.com>'
			],
			description: 'Use WebVR today, on mobile or desktop, without requiring a special browser build.',
			devDependencies: {
				chai: '^3.5.0',
				jsdom: '^9.12.0',
				mocha: '^3.2.0',
				semver: '^5.3.0',
				webpack: '^2.6.1',
				'webpack-dev-server': '^2.4.5'
			},
			main: 'src/node-entry',
			keywords: ['vr', 'webvr'],
			license: 'Apache-2.0',
			scripts: {
				start: 'npm run watch',
				watch: 'webpack-dev-server',
				build: 'webpack',
				test: 'mocha'
			},
			repository: 'googlevr/webvr-polyfill',
			bugs: {
				url: 'https://github.com/googlevr/webvr-polyfill/issues'
			}
		};
	},
	function(e, t, r) {
		function i(e) {
			(this.gl = e),
				(this.ctxAttribs = e.getContextAttributes()),
				(this.meshWidth = 20),
				(this.meshHeight = 20),
				(this.bufferScale = window.WebVRConfig.BUFFER_SCALE),
				(this.bufferWidth = e.drawingBufferWidth),
				(this.bufferHeight = e.drawingBufferHeight),
				(this.realBindFramebuffer = e.bindFramebuffer),
				(this.realEnable = e.enable),
				(this.realDisable = e.disable),
				(this.realColorMask = e.colorMask),
				(this.realClearColor = e.clearColor),
				(this.realViewport = e.viewport),
				s.isIOS() ||
					((this.realCanvasWidth = Object.getOwnPropertyDescriptor(e.canvas.__proto__, 'width')),
					(this.realCanvasHeight = Object.getOwnPropertyDescriptor(e.canvas.__proto__, 'height'))),
				(this.isPatched = !1),
				(this.lastBoundFramebuffer = null),
				(this.cullFace = !1),
				(this.depthTest = !1),
				(this.blend = !1),
				(this.scissorTest = !1),
				(this.stencilTest = !1),
				(this.viewport = [0, 0, 0, 0]),
				(this.colorMask = [!0, !0, !0, !0]),
				(this.clearColor = [0, 0, 0, 0]),
				(this.attribs = {
					position: 0,
					texCoord: 1
				}),
				(this.program = s.linkProgram(e, o, l, this.attribs)),
				(this.uniforms = s.getProgramUniforms(e, this.program)),
				(this.viewportOffsetScale = new Float32Array(8)),
				this.setTextureBounds(),
				(this.vertexBuffer = e.createBuffer()),
				(this.indexBuffer = e.createBuffer()),
				(this.indexCount = 0),
				(this.renderTarget = e.createTexture()),
				(this.framebuffer = e.createFramebuffer()),
				(this.depthStencilBuffer = null),
				(this.depthBuffer = null),
				(this.stencilBuffer = null),
				this.ctxAttribs.depth && this.ctxAttribs.stencil
					? (this.depthStencilBuffer = e.createRenderbuffer())
					: this.ctxAttribs.depth
						? (this.depthBuffer = e.createRenderbuffer())
						: this.ctxAttribs.stencil && (this.stencilBuffer = e.createRenderbuffer()),
				this.patch(),
				this.onResize(),
				window.WebVRConfig.CARDBOARD_UI_DISABLED || (this.cardboardUI = new n(e));
		}
		var n = r(2),
			s = r(0),
			a = r(3),
			o = [
				'attribute vec2 position;',
				'attribute vec3 texCoord;',
				'varying vec2 vTexCoord;',
				'uniform vec4 viewportOffsetScale[2];',
				'void main() {',
				'  vec4 viewport = viewportOffsetScale[int(texCoord.z)];',
				'  vTexCoord = (texCoord.xy * viewport.zw) + viewport.xy;',
				'  gl_Position = vec4( position, 1.0, 1.0 );',
				'}'
			].join('\n'),
			l = [
				'precision mediump float;',
				'uniform sampler2D diffuse;',
				'varying vec2 vTexCoord;',
				'void main() {',
				'  gl_FragColor = texture2D(diffuse, vTexCoord);',
				'}'
			].join('\n');
		(i.prototype.destroy = function() {
			var e = this.gl;
			this.unpatch(),
				e.deleteProgram(this.program),
				e.deleteBuffer(this.vertexBuffer),
				e.deleteBuffer(this.indexBuffer),
				e.deleteTexture(this.renderTarget),
				e.deleteFramebuffer(this.framebuffer),
				this.depthStencilBuffer && e.deleteRenderbuffer(this.depthStencilBuffer),
				this.depthBuffer && e.deleteRenderbuffer(this.depthBuffer),
				this.stencilBuffer && e.deleteRenderbuffer(this.stencilBuffer),
				this.cardboardUI && this.cardboardUI.destroy();
		}),
			(i.prototype.onResize = function() {
				var e = this.gl,
					t = this,
					r = [e.RENDERBUFFER_BINDING, e.TEXTURE_BINDING_2D, e.TEXTURE0];
				a(e, r, function(e) {
					t.realBindFramebuffer.call(e, e.FRAMEBUFFER, null),
						t.scissorTest && t.realDisable.call(e, e.SCISSOR_TEST),
						t.realColorMask.call(e, !0, !0, !0, !0),
						t.realViewport.call(e, 0, 0, e.drawingBufferWidth, e.drawingBufferHeight),
						t.realClearColor.call(e, 0, 0, 0, 1),
						e.clear(e.COLOR_BUFFER_BIT),
						t.realBindFramebuffer.call(e, e.FRAMEBUFFER, t.framebuffer),
						e.bindTexture(e.TEXTURE_2D, t.renderTarget),
						e.texImage2D(
							e.TEXTURE_2D,
							0,
							t.ctxAttribs.alpha ? e.RGBA : e.RGB,
							t.bufferWidth,
							t.bufferHeight,
							0,
							t.ctxAttribs.alpha ? e.RGBA : e.RGB,
							e.UNSIGNED_BYTE,
							null
						),
						e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.LINEAR),
						e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.LINEAR),
						e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE),
						e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE),
						e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t.renderTarget, 0),
						t.ctxAttribs.depth && t.ctxAttribs.stencil
							? (e.bindRenderbuffer(e.RENDERBUFFER, t.depthStencilBuffer),
								e.renderbufferStorage(e.RENDERBUFFER, e.DEPTH_STENCIL, t.bufferWidth, t.bufferHeight),
								e.framebufferRenderbuffer(
									e.FRAMEBUFFER,
									e.DEPTH_STENCIL_ATTACHMENT,
									e.RENDERBUFFER,
									t.depthStencilBuffer
								))
							: t.ctxAttribs.depth
								? (e.bindRenderbuffer(e.RENDERBUFFER, t.depthBuffer),
									e.renderbufferStorage(
										e.RENDERBUFFER,
										e.DEPTH_COMPONENT16,
										t.bufferWidth,
										t.bufferHeight
									),
									e.framebufferRenderbuffer(
										e.FRAMEBUFFER,
										e.DEPTH_ATTACHMENT,
										e.RENDERBUFFER,
										t.depthBuffer
									))
								: t.ctxAttribs.stencil &&
									(e.bindRenderbuffer(e.RENDERBUFFER, t.stencilBuffer),
									e.renderbufferStorage(e.RENDERBUFFER, e.STENCIL_INDEX8, t.bufferWidth, t.bufferHeight),
									e.framebufferRenderbuffer(
										e.FRAMEBUFFER,
										e.STENCIL_ATTACHMENT,
										e.RENDERBUFFER,
										t.stencilBuffer
									)),
						!e.checkFramebufferStatus(e.FRAMEBUFFER) === e.FRAMEBUFFER_COMPLETE &&
							console.error('Framebuffer incomplete!'),
						t.realBindFramebuffer.call(e, e.FRAMEBUFFER, t.lastBoundFramebuffer),
						t.scissorTest && t.realEnable.call(e, e.SCISSOR_TEST),
						t.realColorMask.apply(e, t.colorMask),
						t.realViewport.apply(e, t.viewport),
						t.realClearColor.apply(e, t.clearColor);
				}),
					this.cardboardUI && this.cardboardUI.onResize();
			}),
			(i.prototype.patch = function() {
				if (!this.isPatched) {
					var e = this,
						t = this.gl.canvas,
						r = this.gl;
					s.isIOS() ||
						((t.width = s.getScreenWidth() * this.bufferScale),
						(t.height = s.getScreenHeight() * this.bufferScale),
						Object.defineProperty(t, 'width', {
							configurable: !0,
							enumerable: !0,
							get: function() {
								return e.bufferWidth;
							},
							set: function(r) {
								(e.bufferWidth = r), e.realCanvasWidth.set.call(t, r), e.onResize();
							}
						}),
						Object.defineProperty(t, 'height', {
							configurable: !0,
							enumerable: !0,
							get: function() {
								return e.bufferHeight;
							},
							set: function(r) {
								(e.bufferHeight = r), e.realCanvasHeight.set.call(t, r), e.onResize();
							}
						})),
						(this.lastBoundFramebuffer = r.getParameter(r.FRAMEBUFFER_BINDING)),
						null == this.lastBoundFramebuffer &&
							((this.lastBoundFramebuffer = this.framebuffer),
							this.gl.bindFramebuffer(r.FRAMEBUFFER, this.framebuffer)),
						(this.gl.bindFramebuffer = function(t, i) {
							(e.lastBoundFramebuffer = i || e.framebuffer),
								e.realBindFramebuffer.call(r, t, e.lastBoundFramebuffer);
						}),
						(this.cullFace = r.getParameter(r.CULL_FACE)),
						(this.depthTest = r.getParameter(r.DEPTH_TEST)),
						(this.blend = r.getParameter(r.BLEND)),
						(this.scissorTest = r.getParameter(r.SCISSOR_TEST)),
						(this.stencilTest = r.getParameter(r.STENCIL_TEST)),
						(r.enable = function(t) {
							switch (t) {
								case r.CULL_FACE:
									e.cullFace = !0;
									break;
								case r.DEPTH_TEST:
									e.depthTest = !0;
									break;
								case r.BLEND:
									e.blend = !0;
									break;
								case r.SCISSOR_TEST:
									e.scissorTest = !0;
									break;
								case r.STENCIL_TEST:
									e.stencilTest = !0;
							}
							e.realEnable.call(r, t);
						}),
						(r.disable = function(t) {
							switch (t) {
								case r.CULL_FACE:
									e.cullFace = !1;
									break;
								case r.DEPTH_TEST:
									e.depthTest = !1;
									break;
								case r.BLEND:
									e.blend = !1;
									break;
								case r.SCISSOR_TEST:
									e.scissorTest = !1;
									break;
								case r.STENCIL_TEST:
									e.stencilTest = !1;
							}
							e.realDisable.call(r, t);
						}),
						(this.colorMask = r.getParameter(r.COLOR_WRITEMASK)),
						(r.colorMask = function(t, i, n, s) {
							(e.colorMask[0] = t),
								(e.colorMask[1] = i),
								(e.colorMask[2] = n),
								(e.colorMask[3] = s),
								e.realColorMask.call(r, t, i, n, s);
						}),
						(this.clearColor = r.getParameter(r.COLOR_CLEAR_VALUE)),
						(r.clearColor = function(t, i, n, s) {
							(e.clearColor[0] = t),
								(e.clearColor[1] = i),
								(e.clearColor[2] = n),
								(e.clearColor[3] = s),
								e.realClearColor.call(r, t, i, n, s);
						}),
						(this.viewport = r.getParameter(r.VIEWPORT)),
						(r.viewport = function(t, i, n, s) {
							(e.viewport[0] = t),
								(e.viewport[1] = i),
								(e.viewport[2] = n),
								(e.viewport[3] = s),
								e.realViewport.call(r, t, i, n, s);
						}),
						(this.isPatched = !0),
						s.safariCssSizeWorkaround(t);
				}
			}),
			(i.prototype.unpatch = function() {
				if (this.isPatched) {
					var e = this.gl,
						t = this.gl.canvas;
					s.isIOS() ||
						(Object.defineProperty(t, 'width', this.realCanvasWidth),
						Object.defineProperty(t, 'height', this.realCanvasHeight)),
						(t.width = this.bufferWidth),
						(t.height = this.bufferHeight),
						(e.bindFramebuffer = this.realBindFramebuffer),
						(e.enable = this.realEnable),
						(e.disable = this.realDisable),
						(e.colorMask = this.realColorMask),
						(e.clearColor = this.realClearColor),
						(e.viewport = this.realViewport),
						this.lastBoundFramebuffer == this.framebuffer && e.bindFramebuffer(e.FRAMEBUFFER, null),
						(this.isPatched = !1),
						setTimeout(function() {
							s.safariCssSizeWorkaround(t);
						}, 1);
				}
			}),
			(i.prototype.setTextureBounds = function(e, t) {
				e || (e = [0, 0, 0.5, 1]),
					t || (t = [0.5, 0, 0.5, 1]),
					(this.viewportOffsetScale[0] = e[0]),
					(this.viewportOffsetScale[1] = e[1]),
					(this.viewportOffsetScale[2] = e[2]),
					(this.viewportOffsetScale[3] = e[3]),
					(this.viewportOffsetScale[4] = t[0]),
					(this.viewportOffsetScale[5] = t[1]),
					(this.viewportOffsetScale[6] = t[2]),
					(this.viewportOffsetScale[7] = t[3]);
			}),
			(i.prototype.submitFrame = function() {
				var e = this.gl,
					t = this,
					r = [];
				if (
					(window.WebVRConfig.DIRTY_SUBMIT_FRAME_BINDINGS ||
						r.push(
							e.CURRENT_PROGRAM,
							e.ARRAY_BUFFER_BINDING,
							e.ELEMENT_ARRAY_BUFFER_BINDING,
							e.TEXTURE_BINDING_2D,
							e.TEXTURE0
						),
					a(e, r, function(e) {
						t.realBindFramebuffer.call(e, e.FRAMEBUFFER, null),
							t.cullFace && t.realDisable.call(e, e.CULL_FACE),
							t.depthTest && t.realDisable.call(e, e.DEPTH_TEST),
							t.blend && t.realDisable.call(e, e.BLEND),
							t.scissorTest && t.realDisable.call(e, e.SCISSOR_TEST),
							t.stencilTest && t.realDisable.call(e, e.STENCIL_TEST),
							t.realColorMask.call(e, !0, !0, !0, !0),
							t.realViewport.call(e, 0, 0, e.drawingBufferWidth, e.drawingBufferHeight),
							(t.ctxAttribs.alpha || s.isIOS()) &&
								(t.realClearColor.call(e, 0, 0, 0, 1), e.clear(e.COLOR_BUFFER_BIT)),
							e.useProgram(t.program),
							e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, t.indexBuffer),
							e.bindBuffer(e.ARRAY_BUFFER, t.vertexBuffer),
							e.enableVertexAttribArray(t.attribs.position),
							e.enableVertexAttribArray(t.attribs.texCoord),
							e.vertexAttribPointer(t.attribs.position, 2, e.FLOAT, !1, 20, 0),
							e.vertexAttribPointer(t.attribs.texCoord, 3, e.FLOAT, !1, 20, 8),
							e.activeTexture(e.TEXTURE0),
							e.uniform1i(t.uniforms.diffuse, 0),
							e.bindTexture(e.TEXTURE_2D, t.renderTarget),
							e.uniform4fv(t.uniforms.viewportOffsetScale, t.viewportOffsetScale),
							e.drawElements(e.TRIANGLES, t.indexCount, e.UNSIGNED_SHORT, 0),
							t.cardboardUI && t.cardboardUI.renderNoState(),
							t.realBindFramebuffer.call(t.gl, e.FRAMEBUFFER, t.framebuffer),
							t.ctxAttribs.preserveDrawingBuffer ||
								(t.realClearColor.call(e, 0, 0, 0, 0), e.clear(e.COLOR_BUFFER_BIT)),
							window.WebVRConfig.DIRTY_SUBMIT_FRAME_BINDINGS ||
								t.realBindFramebuffer.call(e, e.FRAMEBUFFER, t.lastBoundFramebuffer),
							t.cullFace && t.realEnable.call(e, e.CULL_FACE),
							t.depthTest && t.realEnable.call(e, e.DEPTH_TEST),
							t.blend && t.realEnable.call(e, e.BLEND),
							t.scissorTest && t.realEnable.call(e, e.SCISSOR_TEST),
							t.stencilTest && t.realEnable.call(e, e.STENCIL_TEST),
							t.realColorMask.apply(e, t.colorMask),
							t.realViewport.apply(e, t.viewport),
							(!t.ctxAttribs.alpha && t.ctxAttribs.preserveDrawingBuffer) ||
								t.realClearColor.apply(e, t.clearColor);
					}),
					s.isIOS())
				) {
					var i = e.canvas;
					(i.width == t.bufferWidth && i.height == t.bufferHeight) ||
						((t.bufferWidth = i.width), (t.bufferHeight = i.height), t.onResize());
				}
			}),
			(i.prototype.updateDeviceInfo = function(e) {
				var t = this.gl,
					r = this,
					i = [t.ARRAY_BUFFER_BINDING, t.ELEMENT_ARRAY_BUFFER_BINDING];
				a(t, i, function(t) {
					var i = r.computeMeshVertices_(r.meshWidth, r.meshHeight, e);
					if (
						(t.bindBuffer(t.ARRAY_BUFFER, r.vertexBuffer),
						t.bufferData(t.ARRAY_BUFFER, i, t.STATIC_DRAW),
						!r.indexCount)
					) {
						var n = r.computeMeshIndices_(r.meshWidth, r.meshHeight);
						t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, r.indexBuffer),
							t.bufferData(t.ELEMENT_ARRAY_BUFFER, n, t.STATIC_DRAW),
							(r.indexCount = n.length);
					}
				});
			}),
			(i.prototype.computeMeshVertices_ = function(e, t, r) {
				for (
					var i = new Float32Array(2 * e * t * 5),
						n = r.getLeftEyeVisibleTanAngles(),
						a = r.getLeftEyeNoLensTanAngles(),
						o = r.getLeftEyeVisibleScreenRect(a),
						l = 0,
						d = 0;
					d < 2;
					d++
				) {
					for (var c = 0; c < t; c++)
						for (var u = 0; u < e; u++, l++) {
							var h = u / (e - 1),
								A = c / (t - 1),
								f = h,
								p = A,
								m = s.lerp(n[0], n[2], h),
								E = s.lerp(n[3], n[1], A),
								v = Math.sqrt(m * m + E * E),
								g = r.distortion.distortInverse(v),
								b = m * g / v,
								w = E * g / v;
							(h = (b - a[0]) / (a[2] - a[0])), (A = (w - a[3]) / (a[1] - a[3]));
							r.device.widthMeters, r.device.heightMeters;
							(h = 2 * (o.x + h * o.width - 0.5)),
								(A = 2 * (o.y + A * o.height - 0.5)),
								(i[5 * l + 0] = h),
								(i[5 * l + 1] = A),
								(i[5 * l + 2] = f),
								(i[5 * l + 3] = p),
								(i[5 * l + 4] = d);
						}
					var y = n[2] - n[0];
					(n[0] = -(y + n[0])),
						(n[2] = y - n[2]),
						(y = a[2] - a[0]),
						(a[0] = -(y + a[0])),
						(a[2] = y - a[2]),
						(o.x = 1 - (o.x + o.width));
				}
				return i;
			}),
			(i.prototype.computeMeshIndices_ = function(e, t) {
				for (
					var r = new Uint16Array(2 * (e - 1) * (t - 1) * 6), i = e / 2, n = t / 2, s = 0, a = 0, o = 0;
					o < 2;
					o++
				)
					for (var l = 0; l < t; l++)
						for (var d = 0; d < e; d++, s++)
							0 != d &&
								0 != l &&
								(d <= i == l <= n
									? ((r[a++] = s),
										(r[a++] = s - e - 1),
										(r[a++] = s - e),
										(r[a++] = s - e - 1),
										(r[a++] = s),
										(r[a++] = s - 1))
									: ((r[a++] = s - 1),
										(r[a++] = s - e),
										(r[a++] = s),
										(r[a++] = s - e),
										(r[a++] = s - 1),
										(r[a++] = s - e - 1)));
				return r;
			}),
			(i.prototype.getOwnPropertyDescriptor_ = function(e, t) {
				var r = Object.getOwnPropertyDescriptor(e, t);
				return (
					(void 0 !== r.get && void 0 !== r.set) ||
						((r.configurable = !0),
						(r.enumerable = !0),
						(r.get = function() {
							return this.getAttribute(t);
						}),
						(r.set = function(e) {
							this.setAttribute(t, e);
						})),
					r
				);
			}),
			(e.exports = i);
	},
	function(e, t, r) {
		function i() {
			(this.displayName = 'Cardboard VRDisplay (webvr-polyfill)'),
				(this.capabilities.hasOrientation = !0),
				(this.capabilities.canPresent = !0),
				(this.bufferScale_ = window.WebVRConfig.BUFFER_SCALE),
				(this.poseSensor_ = new l()),
				(this.distorter_ = null),
				(this.cardboardUI_ = null),
				(this.dpdb_ = new o(!0, this.onDeviceParamsUpdated_.bind(this))),
				(this.deviceInfo_ = new a(this.dpdb_.getDeviceParams())),
				(this.viewerSelector_ = new d()),
				this.viewerSelector_.onChange(this.onViewerChanged_.bind(this)),
				this.deviceInfo_.setViewer(this.viewerSelector_.getCurrentViewer()),
				u.isIOS() && window.addEventListener('resize', this.onResize_.bind(this));
		}
		var n = r(7),
			s = r(2),
			a = r(4),
			o = r(10),
			l = r(14),
			d = r(17),
			c = r(1).VRDisplay,
			u = r(0),
			h = {
				LEFT: 'left',
				RIGHT: 'right'
			};
		(i.prototype = new c()),
			(i.prototype.getImmediatePose = function() {
				return {
					position: this.poseSensor_.getPosition(),
					orientation: this.poseSensor_.getOrientation(),
					linearVelocity: null,
					linearAcceleration: null,
					angularVelocity: null,
					angularAcceleration: null
				};
			}),
			(i.prototype.resetPose = function() {
				this.poseSensor_.resetPose();
			}),
			(i.prototype.getEyeParameters = function(e) {
				var t,
					r = [0.5 * this.deviceInfo_.viewer.interLensDistance, 0, 0];
				if (e == h.LEFT) (r[0] *= -1), (t = this.deviceInfo_.getFieldOfViewLeftEye());
				else {
					if (e != h.RIGHT) return console.error('Invalid eye provided: %s', e), null;
					t = this.deviceInfo_.getFieldOfViewRightEye();
				}
				return {
					fieldOfView: t,
					offset: r,
					renderWidth: 0.5 * this.deviceInfo_.device.width * this.bufferScale_,
					renderHeight: this.deviceInfo_.device.height * this.bufferScale_
				};
			}),
			(i.prototype.onDeviceParamsUpdated_ = function(e) {
				u.isDebug() && console.log('DPDB reported that device params were updated.'),
					this.deviceInfo_.updateDeviceParams(e),
					this.distorter_ && this.distorter_.updateDeviceInfo(this.deviceInfo_);
			}),
			(i.prototype.updateBounds_ = function() {
				this.layer_ &&
					this.distorter_ &&
					(this.layer_.leftBounds || this.layer_.rightBounds) &&
					this.distorter_.setTextureBounds(this.layer_.leftBounds, this.layer_.rightBounds);
			}),
			(i.prototype.beginPresent_ = function() {
				var e = this.layer_.source.getContext('webgl');
				e || (e = this.layer_.source.getContext('experimental-webgl')),
					e || (e = this.layer_.source.getContext('webgl2')),
					e &&
						(this.layer_.predistorted
							? window.WebVRConfig.CARDBOARD_UI_DISABLED ||
								((e.canvas.width = u.getScreenWidth() * this.bufferScale_),
								(e.canvas.height = u.getScreenHeight() * this.bufferScale_),
								(this.cardboardUI_ = new s(e)))
							: ((this.distorter_ = new n(e)),
								this.distorter_.updateDeviceInfo(this.deviceInfo_),
								(this.cardboardUI_ = this.distorter_.cardboardUI)),
						this.cardboardUI_ &&
							this.cardboardUI_.listen(
								function(e) {
									this.viewerSelector_.show(this.layer_.source.parentElement),
										e.stopPropagation(),
										e.preventDefault();
								}.bind(this),
								function(e) {
									this.exitPresent(), e.stopPropagation(), e.preventDefault();
								}.bind(this)
							),
						(this.orientationHandler = this.onOrientationChange_.bind(this)),
						window.addEventListener('orientationchange', this.orientationHandler),
						(this.vrdisplaypresentchangeHandler = this.updateBounds_.bind(this)),
						window.addEventListener('vrdisplaypresentchange', this.vrdisplaypresentchangeHandler),
						this.fireVRDisplayDeviceParamsChange_(),
						this.poseSensor_.stop(),
						this.poseSensor_.start());
			}),
			(i.prototype.endPresent_ = function() {
				this.distorter_ && (this.distorter_.destroy(), (this.distorter_ = null)),
					this.cardboardUI_ && (this.cardboardUI_.destroy(), (this.cardboardUI_ = null)),
					this.rotateInstructions_ && this.rotateInstructions_.hide(),
					this.viewerSelector_.hide(),
					window.removeEventListener('orientationchange', this.orientationHandler),
					window.removeEventListener('vrdisplaypresentchange', this.vrdisplaypresentchangeHandler),
					this.poseSensor_.stop();
			}),
			(i.prototype.submitFrame = function(e) {
				if (this.distorter_) this.updateBounds_(), this.distorter_.submitFrame();
				else if (this.cardboardUI_ && this.layer_) {
					var t = this.layer_.source.getContext('webgl').canvas;
					(t.width == this.lastWidth && t.height == this.lastHeight) || this.cardboardUI_.onResize(),
						(this.lastWidth = t.width),
						(this.lastHeight = t.height),
						this.cardboardUI_.render();
				}
			}),
			(i.prototype.onOrientationChange_ = function(e) {
				this.viewerSelector_.hide(),
					this.rotateInstructions_ && this.rotateInstructions_.update(),
					this.onResize_();
			}),
			(i.prototype.onResize_ = function(e) {
				if (this.layer_) {
					var t = this.layer_.source.getContext('webgl'),
						r = [
							'position: absolute',
							'top: 0',
							'left: 0',
							'width: ' + Math.max(screen.width, screen.height) + 'px',
							'height: ' + Math.min(screen.height, screen.width) + 'px',
							'border: 0',
							'margin: 0',
							'padding: 0 10px 10px 0',
							'box-sizing: content-box'
						];
					t.canvas.setAttribute('style', r.join('; ') + ';'), u.safariCssSizeWorkaround(t.canvas);
				}
			}),
			(i.prototype.onViewerChanged_ = function(e) {
				this.deviceInfo_.setViewer(e),
					this.distorter_ && this.distorter_.updateDeviceInfo(this.deviceInfo_),
					this.fireVRDisplayDeviceParamsChange_();
			}),
			(i.prototype.fireVRDisplayDeviceParamsChange_ = function() {
				var e = new CustomEvent('vrdisplaydeviceparamschange', {
					detail: {
						vrdisplay: this,
						deviceInfo: this.deviceInfo_
					}
				});
				window.dispatchEvent(e);
			}),
			(e.exports = i);
	},
	function(e, t) {
		function r(e) {
			this.coefficients = e;
		}
		(r.prototype.distortInverse = function(e) {
			for (var t = 0, r = 1, i = e - this.distort(t); Math.abs(r - t) > 1e-4; ) {
				var n = e - this.distort(r),
					s = r - n * ((r - t) / (n - i));
				(t = r), (r = s), (i = n);
			}
			return r;
		}),
			(r.prototype.distort = function(e) {
				for (var t = e * e, r = 0, i = 0; i < this.coefficients.length; i++) r = t * (r + this.coefficients[i]);
				return (r + 1) * e;
			}),
			(e.exports = r);
	},
	function(e, t, r) {
		function i(e, t) {
			(this.dpdb = s), this.recalculateDeviceParams_();
		}
		function n(e) {
			(this.xdpi = e.xdpi), (this.ydpi = e.ydpi), (this.bevelMm = e.bevelMm);
		}
		var s = r(11),
			a = r(0);
		(i.prototype.getDeviceParams = function() {
			return this.deviceParams;
		}),
			(i.prototype.recalculateDeviceParams_ = function() {
				var e = this.calcDeviceParams_();
				e &&
					((this.deviceParams = e),
					this.onDeviceParamsUpdated && this.onDeviceParamsUpdated(this.deviceParams));
			}),
			(i.prototype.calcDeviceParams_ = function() {
				for (
					var e = this.dpdb,
						t = navigator.userAgent || navigator.vendor || window.opera,
						r = a.getScreenWidth(),
						i = a.getScreenHeight(),
						s = 0;
					s < e.devices.length;
					s++
				) {
					var o = e.devices[s];
					if (a.isIOS() == ('ios' == o.type)) {
						for (var l = !1, d = 0; d < o.rules.length; d++) {
							var c = o.rules[d];
							if (this.matchRule_(c, t, r, i)) {
								l = !0;
								break;
							}
						}
						if (l) {
							return new n({
								xdpi: o.dpi[0] || o.dpi,
								ydpi: o.dpi[1] || o.dpi,
								bevelMm: o.bw
							});
						}
					}
				}
				return null;
			}),
			(i.prototype.matchRule_ = function(e, t, r, i) {
				if (!e.ua && !e.res) return !1;
				if (e.ua && t.indexOf(e.ua) < 0) return !1;
				if (e.res) {
					if (!e.res[0] || !e.res[1]) return !1;
					var n = e.res[0],
						s = e.res[1];
					if (Math.min(r, i) != Math.min(n, s) || Math.max(r, i) != Math.max(n, s)) return !1;
				}
				return !0;
			}),
			(e.exports = i);
	},
	function(e, t) {
		e.exports = {
			format: 1,
			last_updated: '2017-07-27T13:40:54Z',
			devices: [
				{
					type: 'android',
					rules: [
						{
							mdmh: 'asus/*/Nexus 7/*'
						},
						{
							ua: 'Nexus 7'
						}
					],
					dpi: [320.8, 323],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'asus/*/ASUS_Z00AD/*'
						},
						{
							ua: 'ASUS_Z00AD'
						}
					],
					dpi: [403, 404.6],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'Google/*/Pixel XL/*'
						},
						{
							ua: 'Pixel XL'
						}
					],
					dpi: [537.9, 533],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'Google/*/Pixel/*'
						},
						{
							ua: 'Pixel'
						}
					],
					dpi: [432.6, 436.7],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'HTC/*/HTC6435LVW/*'
						},
						{
							ua: 'HTC6435LVW'
						}
					],
					dpi: [449.7, 443.3],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'HTC/*/HTC One XL/*'
						},
						{
							ua: 'HTC One XL'
						}
					],
					dpi: [315.3, 314.6],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'htc/*/Nexus 9/*'
						},
						{
							ua: 'Nexus 9'
						}
					],
					dpi: 289,
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'HTC/*/HTC One M9/*'
						},
						{
							ua: 'HTC One M9'
						}
					],
					dpi: [442.5, 443.3],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'HTC/*/HTC One_M8/*'
						},
						{
							ua: 'HTC One_M8'
						}
					],
					dpi: [449.7, 447.4],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'HTC/*/HTC One/*'
						},
						{
							ua: 'HTC One'
						}
					],
					dpi: 472.8,
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'Huawei/*/Nexus 6P/*'
						},
						{
							ua: 'Nexus 6P'
						}
					],
					dpi: [515.1, 518],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'LGE/*/Nexus 5X/*'
						},
						{
							ua: 'Nexus 5X'
						}
					],
					dpi: [422, 419.9],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'LGE/*/LGMS345/*'
						},
						{
							ua: 'LGMS345'
						}
					],
					dpi: [221.7, 219.1],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'LGE/*/LG-D800/*'
						},
						{
							ua: 'LG-D800'
						}
					],
					dpi: [422, 424.1],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'LGE/*/LG-D850/*'
						},
						{
							ua: 'LG-D850'
						}
					],
					dpi: [537.9, 541.9],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'LGE/*/VS985 4G/*'
						},
						{
							ua: 'VS985 4G'
						}
					],
					dpi: [537.9, 535.6],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'LGE/*/Nexus 5/*'
						},
						{
							ua: 'Nexus 5 B'
						}
					],
					dpi: [442.4, 444.8],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'LGE/*/Nexus 4/*'
						},
						{
							ua: 'Nexus 4'
						}
					],
					dpi: [319.8, 318.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'LGE/*/LG-P769/*'
						},
						{
							ua: 'LG-P769'
						}
					],
					dpi: [240.6, 247.5],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'LGE/*/LGMS323/*'
						},
						{
							ua: 'LGMS323'
						}
					],
					dpi: [206.6, 204.6],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'LGE/*/LGLS996/*'
						},
						{
							ua: 'LGLS996'
						}
					],
					dpi: [403.4, 401.5],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'Micromax/*/4560MMX/*'
						},
						{
							ua: '4560MMX'
						}
					],
					dpi: [240, 219.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'Micromax/*/A250/*'
						},
						{
							ua: 'Micromax A250'
						}
					],
					dpi: [480, 446.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'Micromax/*/Micromax AQ4501/*'
						},
						{
							ua: 'Micromax AQ4501'
						}
					],
					dpi: 240,
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/DROID RAZR/*'
						},
						{
							ua: 'DROID RAZR'
						}
					],
					dpi: [368.1, 256.7],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/XT830C/*'
						},
						{
							ua: 'XT830C'
						}
					],
					dpi: [254, 255.9],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/XT1021/*'
						},
						{
							ua: 'XT1021'
						}
					],
					dpi: [254, 256.7],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/XT1023/*'
						},
						{
							ua: 'XT1023'
						}
					],
					dpi: [254, 256.7],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/XT1028/*'
						},
						{
							ua: 'XT1028'
						}
					],
					dpi: [326.6, 327.6],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/XT1034/*'
						},
						{
							ua: 'XT1034'
						}
					],
					dpi: [326.6, 328.4],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/XT1053/*'
						},
						{
							ua: 'XT1053'
						}
					],
					dpi: [315.3, 316.1],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/XT1562/*'
						},
						{
							ua: 'XT1562'
						}
					],
					dpi: [403.4, 402.7],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/Nexus 6/*'
						},
						{
							ua: 'Nexus 6 B'
						}
					],
					dpi: [494.3, 489.7],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/XT1063/*'
						},
						{
							ua: 'XT1063'
						}
					],
					dpi: [295, 296.6],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/XT1064/*'
						},
						{
							ua: 'XT1064'
						}
					],
					dpi: [295, 295.6],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/XT1092/*'
						},
						{
							ua: 'XT1092'
						}
					],
					dpi: [422, 424.1],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/XT1095/*'
						},
						{
							ua: 'XT1095'
						}
					],
					dpi: [422, 423.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'motorola/*/G4/*'
						},
						{
							ua: 'Moto G (4)'
						}
					],
					dpi: 401,
					bw: 4,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'OnePlus/*/A0001/*'
						},
						{
							ua: 'A0001'
						}
					],
					dpi: [403.4, 401],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'OnePlus/*/ONE E1005/*'
						},
						{
							ua: 'ONE E1005'
						}
					],
					dpi: [442.4, 441.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'OnePlus/*/ONE A2005/*'
						},
						{
							ua: 'ONE A2005'
						}
					],
					dpi: [391.9, 405.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'OPPO/*/X909/*'
						},
						{
							ua: 'X909'
						}
					],
					dpi: [442.4, 444.1],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/GT-I9082/*'
						},
						{
							ua: 'GT-I9082'
						}
					],
					dpi: [184.7, 185.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G360P/*'
						},
						{
							ua: 'SM-G360P'
						}
					],
					dpi: [196.7, 205.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/Nexus S/*'
						},
						{
							ua: 'Nexus S'
						}
					],
					dpi: [234.5, 229.8],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/GT-I9300/*'
						},
						{
							ua: 'GT-I9300'
						}
					],
					dpi: [304.8, 303.9],
					bw: 5,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-T230NU/*'
						},
						{
							ua: 'SM-T230NU'
						}
					],
					dpi: 216,
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SGH-T399/*'
						},
						{
							ua: 'SGH-T399'
						}
					],
					dpi: [217.7, 231.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SGH-M919/*'
						},
						{
							ua: 'SGH-M919'
						}
					],
					dpi: [440.8, 437.7],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-N9005/*'
						},
						{
							ua: 'SM-N9005'
						}
					],
					dpi: [386.4, 387],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SAMSUNG-SM-N900A/*'
						},
						{
							ua: 'SAMSUNG-SM-N900A'
						}
					],
					dpi: [386.4, 387.7],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/GT-I9500/*'
						},
						{
							ua: 'GT-I9500'
						}
					],
					dpi: [442.5, 443.3],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/GT-I9505/*'
						},
						{
							ua: 'GT-I9505'
						}
					],
					dpi: 439.4,
					bw: 4,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G900F/*'
						},
						{
							ua: 'SM-G900F'
						}
					],
					dpi: [415.6, 431.6],
					bw: 5,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G900M/*'
						},
						{
							ua: 'SM-G900M'
						}
					],
					dpi: [415.6, 431.6],
					bw: 5,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G800F/*'
						},
						{
							ua: 'SM-G800F'
						}
					],
					dpi: 326.8,
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G906S/*'
						},
						{
							ua: 'SM-G906S'
						}
					],
					dpi: [562.7, 572.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/GT-I9300/*'
						},
						{
							ua: 'GT-I9300'
						}
					],
					dpi: [306.7, 304.8],
					bw: 5,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-T535/*'
						},
						{
							ua: 'SM-T535'
						}
					],
					dpi: [142.6, 136.4],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-N920C/*'
						},
						{
							ua: 'SM-N920C'
						}
					],
					dpi: [515.1, 518.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-N920W8/*'
						},
						{
							ua: 'SM-N920W8'
						}
					],
					dpi: [515.1, 518.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/GT-I9300I/*'
						},
						{
							ua: 'GT-I9300I'
						}
					],
					dpi: [304.8, 305.8],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/GT-I9195/*'
						},
						{
							ua: 'GT-I9195'
						}
					],
					dpi: [249.4, 256.7],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SPH-L520/*'
						},
						{
							ua: 'SPH-L520'
						}
					],
					dpi: [249.4, 255.9],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SAMSUNG-SGH-I717/*'
						},
						{
							ua: 'SAMSUNG-SGH-I717'
						}
					],
					dpi: 285.8,
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SPH-D710/*'
						},
						{
							ua: 'SPH-D710'
						}
					],
					dpi: [217.7, 204.2],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/GT-N7100/*'
						},
						{
							ua: 'GT-N7100'
						}
					],
					dpi: 265.1,
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SCH-I605/*'
						},
						{
							ua: 'SCH-I605'
						}
					],
					dpi: 265.1,
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/Galaxy Nexus/*'
						},
						{
							ua: 'Galaxy Nexus'
						}
					],
					dpi: [315.3, 314.2],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-N910H/*'
						},
						{
							ua: 'SM-N910H'
						}
					],
					dpi: [515.1, 518],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-N910C/*'
						},
						{
							ua: 'SM-N910C'
						}
					],
					dpi: [515.2, 520.2],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G130M/*'
						},
						{
							ua: 'SM-G130M'
						}
					],
					dpi: [165.9, 164.8],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G928I/*'
						},
						{
							ua: 'SM-G928I'
						}
					],
					dpi: [515.1, 518.4],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G920F/*'
						},
						{
							ua: 'SM-G920F'
						}
					],
					dpi: 580.6,
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G920P/*'
						},
						{
							ua: 'SM-G920P'
						}
					],
					dpi: [522.5, 577],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G925F/*'
						},
						{
							ua: 'SM-G925F'
						}
					],
					dpi: 580.6,
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G925V/*'
						},
						{
							ua: 'SM-G925V'
						}
					],
					dpi: [522.5, 576.6],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G930F/*'
						},
						{
							ua: 'SM-G930F'
						}
					],
					dpi: 576.6,
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G935F/*'
						},
						{
							ua: 'SM-G935F'
						}
					],
					dpi: 533,
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G950F/*'
						},
						{
							ua: 'SM-G950F'
						}
					],
					dpi: [522.514, 525.762],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'samsung/*/SM-G955U/*'
						},
						{
							ua: 'SM-G955U'
						}
					],
					dpi: [522.514, 525.762],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'Sony/*/C6903/*'
						},
						{
							ua: 'C6903'
						}
					],
					dpi: [442.5, 443.3],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'Sony/*/D6653/*'
						},
						{
							ua: 'D6653'
						}
					],
					dpi: [428.6, 427.6],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'Sony/*/E6653/*'
						},
						{
							ua: 'E6653'
						}
					],
					dpi: [428.6, 425.7],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'Sony/*/E6853/*'
						},
						{
							ua: 'E6853'
						}
					],
					dpi: [403.4, 401.9],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'Sony/*/SGP321/*'
						},
						{
							ua: 'SGP321'
						}
					],
					dpi: [224.7, 224.1],
					bw: 3,
					ac: 500
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'TCT/*/ALCATEL ONE TOUCH Fierce/*'
						},
						{
							ua: 'ALCATEL ONE TOUCH Fierce'
						}
					],
					dpi: [240, 247.5],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'THL/*/thl 5000/*'
						},
						{
							ua: 'thl 5000'
						}
					],
					dpi: [480, 443.3],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'android',
					rules: [
						{
							mdmh: 'ZTE/*/ZTE Blade L2/*'
						},
						{
							ua: 'ZTE Blade L2'
						}
					],
					dpi: 240,
					bw: 3,
					ac: 500
				},
				{
					type: 'ios',
					rules: [
						{
							res: [640, 960]
						}
					],
					dpi: [325.1, 328.4],
					bw: 4,
					ac: 1e3
				},
				{
					type: 'ios',
					rules: [
						{
							res: [640, 1136]
						}
					],
					dpi: [317.1, 320.2],
					bw: 3,
					ac: 1e3
				},
				{
					type: 'ios',
					rules: [
						{
							res: [750, 1334]
						}
					],
					dpi: 326.4,
					bw: 4,
					ac: 1e3
				},
				{
					type: 'ios',
					rules: [
						{
							res: [1242, 2208]
						}
					],
					dpi: [453.6, 458.4],
					bw: 4,
					ac: 1e3
				},
				{
					type: 'ios',
					rules: [
						{
							res: [1125, 2001]
						}
					],
					dpi: [410.9, 415.4],
					bw: 4,
					ac: 1e3
				}
			]
		};
	},
	function(e, t, r) {
		var i = (r(0), r(5).WebVRPolyfill);
		(window.WebVRConfig = Object.assign(
			{
				FORCE_ENABLE_VR: !1,
				K_FILTER: 0.98,
				PREDICTION_TIME_S: 0.04,
				TOUCH_PANNER_DISABLED: !0,
				CARDBOARD_UI_DISABLED: !1,
				ROTATE_INSTRUCTIONS_DISABLED: !1,
				YAW_ONLY: !1,
				MOUSE_KEYBOARD_CONTROLS_DISABLED: !1,
				DEFER_INITIALIZATION: !1,
				ENABLE_DEPRECATED_API: !1,
				BUFFER_SCALE: 0.5,
				DIRTY_SUBMIT_FRAME_BINDINGS: !1,
				ALWAYS_APPEND_POLYFILL_DISPLAY: !1,
				GET_VR_DISPLAYS_TIMEOUT: 1e3
			},
			window.WebVRConfig
		)),
			new i(),
			(window.WebVRPolyfill = i);
	},
	function(e, t, r) {
		function i(e) {
			(this.kFilter = e),
				(this.currentAccelMeasurement = new n()),
				(this.currentGyroMeasurement = new n()),
				(this.previousGyroMeasurement = new n()),
				s.isIOS()
					? (this.filterQ = new THREE.Quaternion(-1, 0, 0, 1))
					: (this.filterQ = new THREE.Quaternion(1, 0, 0, 1)),
				(this.previousFilterQ = new THREE.Quaternion()),
				this.previousFilterQ.copy(this.filterQ),
				(this.accelQ = new THREE.Quaternion()),
				(this.isOrientationInitialized = !1),
				(this.estimatedGravity = new THREE.Vector3()),
				(this.measuredGravity = new THREE.Vector3()),
				(this.gyroIntegralQ = new THREE.Quaternion());
		}
		var n = r(16),
			s = r(0);
		(i.prototype.addAccelMeasurement = function(e, t) {
			this.currentAccelMeasurement.set(e, t);
		}),
			(i.prototype.addGyroMeasurement = function(e, t) {
				this.currentGyroMeasurement.set(e, t);
				var r = t - this.previousGyroMeasurement.timestampS;
				s.isTimestampDeltaValid(r) && this.run_(),
					this.previousGyroMeasurement.copy(this.currentGyroMeasurement);
			}),
			(i.prototype.run_ = function() {
				if (!this.isOrientationInitialized)
					return (
						(this.accelQ = this.accelToQuaternion_(this.currentAccelMeasurement.sample)),
						this.previousFilterQ.copy(this.accelQ),
						void (this.isOrientationInitialized = !0)
					);
				var e = this.currentGyroMeasurement.timestampS - this.previousGyroMeasurement.timestampS,
					t = this.gyroToQuaternionDelta_(this.currentGyroMeasurement.sample, e);
				this.gyroIntegralQ.multiply(t), this.filterQ.copy(this.previousFilterQ), this.filterQ.multiply(t);
				var r = new THREE.Quaternion();
				r.copy(this.filterQ),
					r.inverse(),
					this.estimatedGravity.set(0, 0, -1),
					this.estimatedGravity.applyQuaternion(r),
					this.estimatedGravity.normalize(),
					this.measuredGravity.copy(this.currentAccelMeasurement.sample),
					this.measuredGravity.normalize();
				var i = new THREE.Quaternion();
				i.setFromUnitVectors(this.estimatedGravity, this.measuredGravity), i.inverse();
				var n = new THREE.Quaternion();
				n.copy(this.filterQ),
					n.multiply(i),
					this.filterQ.slerp(n, 1 - this.kFilter),
					this.previousFilterQ.copy(this.filterQ);
			}),
			(i.prototype.getOrientation = function() {
				return this.filterQ;
			}),
			(i.prototype.accelToQuaternion_ = function(e) {
				var t = new THREE.Vector3();
				t.copy(e), t.normalize();
				var r = new THREE.Quaternion();
				return r.setFromUnitVectors(new THREE.Vector3(0, 0, -1), t), r.inverse(), r;
			}),
			(i.prototype.gyroToQuaternionDelta_ = function(e, t) {
				var r = new THREE.Quaternion(),
					i = new THREE.Vector3();
				return i.copy(e), i.normalize(), r.setFromAxisAngle(i, e.length() * t), r;
			}),
			(e.exports = i);
	},
	function(e, t, r) {
		function i() {
			(this.deviceId = 'webvr-polyfill:fused'),
				(this.deviceName = 'VR Position Device (webvr-polyfill:fused)'),
				(this.accelerometer = new THREE.Vector3()),
				(this.gyroscope = new THREE.Vector3()),
				(this.filter = new n(window.WebVRConfig.K_FILTER)),
				(this.posePredictor = new s(window.WebVRConfig.PREDICTION_TIME_S)),
				(this.filterToWorldQ = new THREE.Quaternion()),
				a.isIOS()
					? this.filterToWorldQ.setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.PI / 2)
					: this.filterToWorldQ.setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2),
				(this.inverseWorldToScreenQ = new THREE.Quaternion()),
				(this.worldToScreenQ = new THREE.Quaternion()),
				(this.originalPoseAdjustQ = new THREE.Quaternion()),
				this.originalPoseAdjustQ.setFromAxisAngle(
					new THREE.Vector3(0, 0, 1),
					-window.orientation * Math.PI / 180
				),
				this.setScreenTransform_(),
				a.isLandscapeMode() && this.filterToWorldQ.multiply(this.inverseWorldToScreenQ),
				(this.resetQ = new THREE.Quaternion()),
				(this.isFirefoxAndroid = a.isFirefoxAndroid()),
				(this.isIOS = a.isIOS()),
				(this.orientationOut_ = new Float32Array(4));
		}
		var n = r(13),
			s = r(15),
			a = r(0);
		(i.prototype.getPosition = function() {
			return null;
		}),
			(i.prototype.getOrientation = function() {
				var e = this.filter.getOrientation();
				this.predictedQ = this.posePredictor.getPrediction(e, this.gyroscope, this.previousTimestampS);
				var t = new THREE.Quaternion();
				return (
					t.copy(this.filterToWorldQ),
					t.multiply(this.resetQ),
					t.multiply(this.predictedQ),
					t.multiply(this.worldToScreenQ),
					window.WebVRConfig.YAW_ONLY && ((t.x = 0), (t.z = 0), t.normalize()),
					(this.orientationOut_[0] = t.x),
					(this.orientationOut_[1] = t.y),
					(this.orientationOut_[2] = t.z),
					(this.orientationOut_[3] = t.w),
					this.orientationOut_
				);
			}),
			(i.prototype.resetPose = function() {
				this.resetQ.copy(this.filter.getOrientation()),
					(this.resetQ.x = 0),
					(this.resetQ.y = 0),
					(this.resetQ.z *= -1),
					this.resetQ.normalize(),
					a.isLandscapeMode() && this.resetQ.multiply(this.inverseWorldToScreenQ),
					this.resetQ.multiply(this.originalPoseAdjustQ);
			}),
			(i.prototype.onDeviceMotion_ = function(e) {
				this.updateDeviceMotion_(e);
			}),
			(i.prototype.updateDeviceMotion_ = function(e) {
				var t = e.accelerationIncludingGravity,
					r = e.rotationRate,
					i = e.timeStamp / 1e3,
					n = i - this.previousTimestampS;
				if (n <= a.MIN_TIMESTEP || n > a.MAX_TIMESTEP)
					return (
						console.warn(
							'Invalid timestamps detected. Time step between successive gyroscope sensor samples is very small or not monotonic'
						),
						void (this.previousTimestampS = i)
					);
				this.accelerometer.set(-t.x, -t.y, -t.z),
					this.gyroscope.set(r.alpha, r.beta, r.gamma),
					(this.isIOS || this.isFirefoxAndroid) && this.gyroscope.multiplyScalar(Math.PI / 180),
					this.filter.addAccelMeasurement(this.accelerometer, i),
					this.filter.addGyroMeasurement(this.gyroscope, i),
					(this.previousTimestampS = i);
			}),
			(i.prototype.onOrientationChange_ = function(e) {
				this.setScreenTransform_();
			}),
			(i.prototype.onMessage_ = function(e) {
				var t = e.data;
				if (t && t.type) {
					'devicemotion' === t.type.toLowerCase() && this.updateDeviceMotion_(t.deviceMotionEvent);
				}
			}),
			(i.prototype.setScreenTransform_ = function() {
				switch ((this.worldToScreenQ.set(0, 0, 0, 1), window.orientation)) {
					case 0:
						break;
					case 90:
						this.worldToScreenQ.setFromAxisAngle(new THREE.Vector3(0, 0, 1), -Math.PI / 2);
						break;
					case -90:
						this.worldToScreenQ.setFromAxisAngle(new THREE.Vector3(0, 0, 1), Math.PI / 2);
				}
				this.inverseWorldToScreenQ.copy(this.worldToScreenQ), this.inverseWorldToScreenQ.inverse();
			}),
			(i.prototype.start = function() {
				(this.onDeviceMotionCallback_ = this.onDeviceMotion_.bind(this)),
					(this.onOrientationChangeCallback_ = this.onOrientationChange_.bind(this)),
					(this.onMessageCallback_ = this.onMessage_.bind(this)),
					a.isIOS() &&
						a.isInsideCrossDomainIFrame() &&
						window.addEventListener('message', this.onMessageCallback_),
					window.addEventListener('orientationchange', this.onOrientationChangeCallback_),
					window.addEventListener('devicemotion', this.onDeviceMotionCallback_);
			}),
			(i.prototype.stop = function() {
				window.removeEventListener('devicemotion', this.onDeviceMotionCallback_),
					window.removeEventListener('orientationchange', this.onOrientationChangeCallback_),
					window.removeEventListener('message', this.onMessageCallback_);
			}),
			(e.exports = i);
	},
	function(e, t, r) {
		function i(e) {
			(this.predictionTimeS = e),
				(this.previousQ = new THREE.Quaternion()),
				(this.previousTimestampS = null),
				(this.deltaQ = new THREE.Quaternion()),
				(this.outQ = new THREE.Quaternion());
		}
		r(0);
		(i.prototype.getPrediction = function(e, t, r) {
			if (!this.previousTimestampS) return this.previousQ.copy(e), (this.previousTimestampS = r), e;
			var i = new THREE.Vector3();
			i.copy(t), i.normalize();
			var n = t.length();
			if (n < 20 * THREE.Math.DEG2RAD) return this.outQ.copy(e), this.previousQ.copy(e), this.outQ;
			var s = (this.previousTimestampS, n * this.predictionTimeS);
			return (
				this.deltaQ.setFromAxisAngle(i, s),
				this.outQ.copy(this.previousQ),
				this.outQ.multiply(this.deltaQ),
				this.previousQ.copy(e),
				(this.previousTimestampS = r),
				this.outQ
			);
		}),
			(e.exports = i);
	},
	function(e, t) {
		function r(e, t) {
			this.set(e, t);
		}
		(r.prototype.set = function(e, t) {
			(this.sample = e), (this.timestampS = t);
		}),
			(r.prototype.copy = function(e) {
				this.set(e.sample, e.timestampS);
			}),
			(e.exports = r);
	},
	function(e, t, r) {
		function i() {
			try {
				this.selectedKey = localStorage.getItem(a);
			} catch (e) {
				console.error('Failed to load viewer profile: %s', e);
			}
			this.selectedKey || (this.selectedKey = s),
				(this.dialog = this.createDialog_(n.Viewers)),
				(this.root = null),
				(this.onChangeCallbacks_ = []);
		}
		var n = r(4),
			s = (r(0), 'CardboardV1'),
			a = 'WEBVR_CARDBOARD_VIEWER';
		(i.prototype.show = function(e) {
			(this.root = e),
				e.appendChild(this.dialog),
				(this.dialog.querySelector('#' + this.selectedKey).checked = !0),
				(this.dialog.style.display = 'block');
		}),
			(i.prototype.hide = function() {
				this.root && this.root.contains(this.dialog) && this.root.removeChild(this.dialog),
					(this.dialog.style.display = 'none');
			}),
			(i.prototype.getCurrentViewer = function() {
				return n.Viewers[this.selectedKey];
			}),
			(i.prototype.getSelectedKey_ = function() {
				var e = this.dialog.querySelector('input[name=field]:checked');
				return e ? e.id : null;
			}),
			(i.prototype.onChange = function(e) {
				this.onChangeCallbacks_.push(e);
			}),
			(i.prototype.fireOnChange_ = function(e) {
				for (var t = 0; t < this.onChangeCallbacks_.length; t++) this.onChangeCallbacks_[t](e);
			}),
			(i.prototype.onSave_ = function() {
				if (((this.selectedKey = this.getSelectedKey_()), !this.selectedKey || !n.Viewers[this.selectedKey]))
					return void console.error('ViewerSelector.onSave_: this should never happen!');
				this.fireOnChange_(n.Viewers[this.selectedKey]);
				try {
					localStorage.setItem(a, this.selectedKey);
				} catch (e) {
					console.error('Failed to save viewer profile: %s', e);
				}
				this.hide();
			}),
			(i.prototype.createDialog_ = function(e) {
				var t = document.createElement('div');
				t.classList.add('webvr-polyfill-viewer-selector'), (t.style.display = 'none');
				var r = document.createElement('div'),
					i = r.style;
				(i.position = 'fixed'),
					(i.left = 0),
					(i.top = 0),
					(i.width = '100%'),
					(i.height = '100%'),
					(i.background = 'rgba(0, 0, 0, 0.3)'),
					r.addEventListener('click', this.hide.bind(this));
				var n = document.createElement('div'),
					i = n.style;
				(i.boxSizing = 'border-box'),
					(i.position = 'fixed'),
					(i.top = '24px'),
					(i.left = '50%'),
					(i.marginLeft = '-140px'),
					(i.width = '280px'),
					(i.padding = '24px'),
					(i.overflow = 'hidden'),
					(i.background = '#fafafa'),
					(i.fontFamily = "'Roboto', sans-serif"),
					(i.boxShadow = '0px 5px 20px #666'),
					n.appendChild(this.createH1_('Select your viewer'));
				for (var s in e) n.appendChild(this.createChoice_(s, e[s].label));
				return (
					n.appendChild(this.createButton_('Save', this.onSave_.bind(this))),
					t.appendChild(r),
					t.appendChild(n),
					t
				);
			}),
			(i.prototype.createH1_ = function(e) {
				var t = document.createElement('h1'),
					r = t.style;
				return (
					(r.color = 'black'),
					(r.fontSize = '20px'),
					(r.fontWeight = 'bold'),
					(r.marginTop = 0),
					(r.marginBottom = '24px'),
					(t.innerHTML = e),
					t
				);
			}),
			(i.prototype.createChoice_ = function(e, t) {
				var r = document.createElement('div');
				(r.style.marginTop = '8px'), (r.style.color = 'black');
				var i = document.createElement('input');
				(i.style.fontSize = '30px'),
					i.setAttribute('id', e),
					i.setAttribute('type', 'radio'),
					i.setAttribute('value', e),
					i.setAttribute('name', 'field');
				var n = document.createElement('label');
				return (
					(n.style.marginLeft = '4px'),
					n.setAttribute('for', e),
					(n.innerHTML = t),
					r.appendChild(i),
					r.appendChild(n),
					r
				);
			}),
			(i.prototype.createButton_ = function(e, t) {
				var r = document.createElement('button');
				r.innerHTML = e;
				var i = r.style;
				return (
					(i.float = 'right'),
					(i.textTransform = 'uppercase'),
					(i.color = '#1094f7'),
					(i.fontSize = '14px'),
					(i.letterSpacing = 0),
					(i.border = 0),
					(i.background = 'none'),
					(i.marginTop = '16px'),
					r.addEventListener('click', t),
					r
				);
			}),
			(e.exports = i);
	},
	function(e, t, r) {
		function i() {
			function e(e, t, r) {
				var i = document.createElement('source');
				(i.src = r), (i.type = 'video/' + t), e.appendChild(i);
			}
			var t = document.createElement('video');
			t.setAttribute('loop', ''),
				e(
					t,
					'webm',
					s.base64(
						'video/webm',
						'GkXfo0AgQoaBAUL3gQFC8oEEQvOBCEKCQAR3ZWJtQoeBAkKFgQIYU4BnQI0VSalmQCgq17FAAw9CQE2AQAZ3aGFtbXlXQUAGd2hhbW15RIlACECPQAAAAAAAFlSua0AxrkAu14EBY8WBAZyBACK1nEADdW5khkAFVl9WUDglhohAA1ZQOIOBAeBABrCBCLqBCB9DtnVAIueBAKNAHIEAAIAwAQCdASoIAAgAAUAmJaQAA3AA/vz0AAA='
					)
				),
				e(
					t,
					'mp4',
					s.base64(
						'video/mp4',
						'AAAAHGZ0eXBpc29tAAACAGlzb21pc28ybXA0MQAAAAhmcmVlAAAAG21kYXQAAAGzABAHAAABthADAowdbb9/AAAC6W1vb3YAAABsbXZoZAAAAAB8JbCAfCWwgAAAA+gAAAAAAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIVdHJhawAAAFx0a2hkAAAAD3wlsIB8JbCAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAIAAAACAAAAAABsW1kaWEAAAAgbWRoZAAAAAB8JbCAfCWwgAAAA+gAAAAAVcQAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAAAVxtaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAEcc3RibAAAALhzdHNkAAAAAAAAAAEAAACobXA0dgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIAAgASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAAFJlc2RzAAAAAANEAAEABDwgEQAAAAADDUAAAAAABS0AAAGwAQAAAbWJEwAAAQAAAAEgAMSNiB9FAEQBFGMAAAGyTGF2YzUyLjg3LjQGAQIAAAAYc3R0cwAAAAAAAAABAAAAAQAAAAAAAAAcc3RzYwAAAAAAAAABAAAAAQAAAAEAAAABAAAAFHN0c3oAAAAAAAAAEwAAAAEAAAAUc3RjbwAAAAAAAAABAAAALAAAAGB1ZHRhAAAAWG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAK2lsc3QAAAAjqXRvbwAAABtkYXRhAAAAAQAAAABMYXZmNTIuNzguMw=='
					)
				),
				(this.request = function() {
					t.paused && t.play();
				}),
				(this.release = function() {
					t.pause();
				});
		}
		function n() {
			var e = null;
			(this.request = function() {
				e ||
					(e = setInterval(function() {
						(window.location = window.location), setTimeout(window.stop, 0);
					}, 3e4));
			}),
				(this.release = function() {
					e && (clearInterval(e), (e = null));
				});
		}
		var s = r(0);
		e.exports = (function() {
			var e = navigator.userAgent || navigator.vendor || window.opera;
			return e.match(/iPhone/i) || e.match(/iPod/i) ? n : i;
		})();
	}
]);
